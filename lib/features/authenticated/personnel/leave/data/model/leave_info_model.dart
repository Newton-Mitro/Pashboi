import 'package:pashboi/features/authenticated/personnel/leave/domain/entities/leave_info_entity.dart';

class LeaveInfoModel extends LeaveInfoEntity {
  LeaveInfoModel({
    required String id,
    required String leaveTypeCode,
    required String leaveType,
    required int employeeId,
    required String employeeCode,
    required double totalLeaveDays,
    required double balance,
    required double totalLeaveApplied,
    required String lastApplicationDate,
    required int maxBalance,
    required int minimumNoticeDay,
    required int maxLeaveAtATime,
    required int documentsRequiredDays,
    required double maximumHourLeave,
    required int applyBeforeDays,
    required bool isFallbackRequired,
    required int maximumFallbackDays,
    required bool isEditable,
    required bool isRejoinDateRequired,
    required bool enableFutureDateApplication,
    required bool enablePastDateApplication,
    required bool withTime,
    required bool enablePresentDateApplication,
    required bool requireToDate,
  }) : super(
         id: leaveTypeCode,
         leaveTypeCode: leaveTypeCode,
         leaveType: leaveType,
         employeeId: employeeId,
         employeeCode: employeeCode,
         totalLeaveDays: totalLeaveDays,
         balance: balance,
         totalLeaveApplied: totalLeaveApplied,
         lastApplicationDate: lastApplicationDate,
         maxBalance: maxBalance,
         minimumNoticeDay: minimumNoticeDay,
         maxLeaveAtATime: maxLeaveAtATime,
         documentsRequiredDays: documentsRequiredDays,
         maximumHourLeave: maximumHourLeave,
         applyBeforeDays: applyBeforeDays,
         isFallbackRequired: isFallbackRequired,
         maximumFallbackDays: maximumFallbackDays,
         isEditable: isEditable,
         isRejoinDateRequired: isRejoinDateRequired,
         enableFutureDateApplication: enableFutureDateApplication,
         enablePastDateApplication: enablePastDateApplication,
         withTime: withTime,
         enablePresentDateApplication: enablePresentDateApplication,
         requireToDate: requireToDate,
       );

  factory LeaveInfoModel.fromJson(Map<String, dynamic> json) {
    return LeaveInfoModel(
      id: json['LeaveTypeCode'] ?? '',
      leaveTypeCode: json['LeaveTypeCode'] ?? '',
      leaveType: json['LeaveType'] ?? '',
      employeeId: json['EmployeeId'] ?? 0,
      employeeCode: json['EmployeeCode'] ?? '',
      totalLeaveDays: json['TotalLeaveDays'] ?? 0.0,
      balance: json['Balance'] ?? 0.0,
      totalLeaveApplied: json['TotalLeaveApplied'] ?? 0.0,
      lastApplicationDate: json['LastApplicationDate'] ?? '',
      maxBalance: json['MaxBalance'] ?? 0,
      minimumNoticeDay: json['MinimumNoticeDay'] ?? 0,
      maxLeaveAtATime: json['MaxLeaveAtATime'] ?? 0,
      documentsRequiredDays: json['DocumentsRequiredDays'] ?? 0,
      maximumHourLeave: json['MaximumHourLeave'] ?? 0.0,
      applyBeforeDays: json['ApplyBeforeDays'] ?? 0,
      isFallbackRequired: json['IsFallbackRequired'] ?? false,
      maximumFallbackDays: json['MaximumFallbackDays'] ?? 0,
      isEditable: json['IsEditable'] ?? false,
      isRejoinDateRequired: json['IsRejoinDateRequired'] ?? false,
      enableFutureDateApplication: json['EnableFutureDateApplication'] ?? false,
      enablePastDateApplication: json['EnablePastDateApplication'] ?? false,
      withTime: json['WithTime'] ?? false,
      enablePresentDateApplication:
          json['EnablePresentDateApplication'] ?? false,
      requireToDate: json['RequireToDate'] ?? false,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'LeaveTypeCode': leaveTypeCode,
      'LeaveType': leaveType,
      'EmployeeId': employeeId,
      'TotalLeaveDays': totalLeaveDays,
      'Balance': balance,
      'TotalLeaveApplied': totalLeaveApplied,
      'LastApplicationDate': lastApplicationDate,
      'MaxBalance': maxBalance,
      'MinimumNoticeDay': minimumNoticeDay,
      'MaxLeaveAtATime': maxLeaveAtATime,
      'DocumentsRequiredDays': documentsRequiredDays,
      'MaximumHourLeave': maximumHourLeave,
      'ApplyBeforeDays': applyBeforeDays,
      'IsFallbackRequired': isFallbackRequired,
      'MaximumFallbackDays': maximumFallbackDays,
      'IsEditable': isEditable,
      'IsRejoinDateRequired': isRejoinDateRequired,
      'EnableFutureDateApplication': enableFutureDateApplication,
      'EnablePastDateApplication': enablePastDateApplication,
      'WithTime': withTime,
      'EnablePresentDateApplication': enablePresentDateApplication,
      'RequireToDate': requireToDate,
    };
  }
}
